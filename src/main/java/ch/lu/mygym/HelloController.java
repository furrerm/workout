package ch.lu.mygym;

import ch.lu.mygym.dtos.entities.ExerciseEntity;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.bind.annotation.RestController;

import java.io.File;
import java.io.FileNotFoundException;
import java.util.Scanner;

@Controller
@RestController
@RequestMapping("/hello")
public class HelloController {
    @Autowired  //This means to get the bean called userRepository
    // Which is auto-generated by Spring, we will use it to handle the data
    private CustomerRepository userRepository;
    @GetMapping
    public String hello(){
        return "hello from youtubeereeeee";
    }

    @GetMapping(path="/all")
    public @ResponseBody
    String getAllUsers() {
        // This returns a JSON or XML with the users
        return "hello";
        // return userRepository.findAll();
    }

    @GetMapping(path="/path")
    public String getAllUsers1() {
        String output = "empty output";

        String filePath = System.getProperty("user.dir")+"/refreshToken.json";

        // String filePath = String filePath = System.getProperty("user.dir")+"/../../../etc/pki/tls/certs/testFile.txt";"./testFile.txt";

        try {
            File myObj = new File(filePath);
            Scanner myReader = new Scanner(myObj);
            while (myReader.hasNextLine()) {
                output += myReader.nextLine();
            }
            myReader.close();
        } catch (FileNotFoundException e) {
            System.out.println("An error occurred.");
            output = e.getMessage();
        }

        return output + "from : "+System.getProperty("user.dir");
        // return userRepository.findAll();
    }

    @GetMapping(path="/all2")
    public @ResponseBody Iterable<ExerciseEntity> getAllUsers2() {
        // This returns a JSON or XML with the users

        return userRepository.findAll();
    }
/*
    @Bean(name="entityManagerFactory")
    public LocalSessionFactoryBean sessionFactory() {
        LocalSessionFactoryBean sessionFactory = new LocalSessionFactoryBean();

        return sessionFactory;
    }

 */
}
